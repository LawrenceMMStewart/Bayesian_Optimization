#Gaussian Process for sin(x+y)
srand(1234)
function uniform(a,b,N,M)
    #Returns a NxM uniformly distributed matrix
    #for random number in range [a,b] we note that it can be generated by: rand() * (b-a) - a 
    #where rand() prints real numbers:
    rand(N,M)*(b-a)+a
end
using Distributions
include("Kernals.jl")
include("gaussian_process.jl")

Xtest=linspace(-pi,pi,100)
Ytest=linspace(-pi,pi,100)
Test=gen_points([Xtest,Ytest])[1]
sin_test = map(i -> sin(i[1]+i[2]),Test)

N=40

Xsample=uniform(-pi,pi,N,1) #if uniform need to add (,1) to specify dimension
Ysample=uniform(-pi,pi,N,1)

Randomsamp = zeros(N,2)

for (i,x) in enumerate(Xsample)
    Randomsamp[i,1] = Xsample[i]
    Randomsamp[i,2] = Ysample[i]
end


#Here Randomsamp is the (x,y) vectors:


noise_dist=Normal(0,10.0^(-6))
# y=map(i-> sin( i[1]+i[2]),Randomsamp)+rand(noise_dist)
Y=[sin(Randomsamp[i,1]+Randomsamp[i,2])+rand(noise_dist) for i=1:size(Randomsamp)[1]]


K=cov_gen(std_exp_square_ker,Test,Test)+eye(length(Test))*1e-6
 

#Our samples are Randomsamp and y


#print(Randomsamp[1,:]) this gives you the array of each entry of Randomsamp

D=[(Randomsamp[i,:],Y[i]) for i=1:length(Y)];
# an entry from `D is in the form ([x,y],sin(x+y))

# x=map(x->x[1],D)
# print(size(x)) elements of x are in arrays;

mu,sigma,D = gaussian_process2(std_exp_square_ker,D,1e-6,Test);
mu=reshape(mu,length(mu));
sigma=reshape(sigma,length(sigma));

y=map(x->x[2],D);   # these are our y noisy function
x=map(x->x[1],D); #These are our x training points (dont forget they come as arrays)
x1=map(p->p[1],x)
x2=map(p->p[2],x)

using PyPlot
# fig = figure("pyplot_plot",figsize=(5,5))
# ax = axes()
#NO FILL BETWEEN EXISTS FOR 3d
# surf(x1,x2,2*y,color="#E4B5F1",alpha=0.2)
# surf(x1,x2,y,color="#19F0E9",alpha=0.9)
# surf(Xsample,Ysample,mu+2*sigma,alpha=0.2)

title("Gaussian Process Sin(x+y)") 
# ylabel("f(x)")
# xlabel("x")
grid("off")
show()




